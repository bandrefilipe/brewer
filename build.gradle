plugins {
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'jacoco'
    id 'java'
    id 'org.sonarqube' version '3.0'
}

sourceCompatibility = JavaVersion.VERSION_11

def props = new Properties()
file('brewer-configuration/src/main/resources/application.properties').withInputStream {
    props.load(it)
}

ext {
    setProperty('springBootVersion', '2.3.4.RELEASE')
}

allprojects {
    group('io.bandrefilipe')
    version(props.getProperty('app.version'))

    apply(plugin: 'io.spring.dependency-management')
    apply(plugin: 'jacoco')

    repositories {
        mavenCentral()
        jcenter()
    }

    configurations {
        implementation.exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-logging')
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
}

subprojects {
    apply(plugin: 'java-library')

    dependencies {
        // JUnit
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude(group: 'org.junit.vintage', module: 'junit-vintage-engine')
            exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-logging')
        }
        // Lombok
        compileOnly('org.projectlombok:lombok')
        annotationProcessor('org.projectlombok:lombok')
    }

    sonarqube {
        properties {
            property 'sonar.junit.reportPaths', 'build/test-results/test'
            property 'sonar.sources', 'src/main/java'
            property 'sonar.tests', 'src/test/java'
            property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco'
        }
    }

    test {
        setJvmArgs([
                '-Dspring.profiles.active=test'
        ])
        useJUnitPlatform()
        finalizedBy(jacocoTestReport)
    }

    jacocoTestReport {
        dependsOn(test)
        reports {
            xml.enabled(true)
        }
    }
}

project(":adapters:brewer-api") {
    ext {
        setProperty('springfoxVersion', '3.0.0')
    }

    dependencies {
        implementation project(':brewer-application')
        implementation project(':brewer-commons')

        // Spring Boot Starter :: Web
        implementation('org.springframework.boot:spring-boot-starter-web')
        // Spring Boot Starter :: Validation
        implementation('org.springframework.boot:spring-boot-starter-validation')
        // Springfox Boot Starter
        implementation("io.springfox:springfox-boot-starter:${springfoxVersion}")
    }
}

project(":adapters:brewer-persistence") {
    dependencies {
        implementation project(':brewer-application')
        implementation project(':brewer-commons')

        // Flyway :: Core
        implementation('org.flywaydb:flyway-core')
        // H2
        runtimeOnly('com.h2database:h2')
        // Spring Boot Starter :: Data JPA
        implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    }
}

project(":adapters:brewer-web") {
    ext {
        setProperty('layoutDialectVersion', '2.5.1')
        setProperty('bootstrapVersion', '3.3.7-1')
        setProperty('jqueryVersion', '1.12.4')
        setProperty('webjarsLocatorVersion', '0.40')
    }

    dependencies {
        implementation project(':brewer-application')
        implementation project(':brewer-commons')

        // Spring Boot Starter :: Actuator
        implementation('org.springframework.boot:spring-boot-starter-actuator')
        // Spring Boot Starter :: Thymeleaf
        implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
        // Spring Boot Starter :: Validation
        implementation('org.springframework.boot:spring-boot-starter-validation')
        // Spring Boot Starter :: Web
        implementation('org.springframework.boot:spring-boot-starter-web')
        // Thymeleaf :: Layout Dialect
        implementation("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:${layoutDialectVersion}")
        // Webjars :: Bootstrap
        implementation("org.webjars:bootstrap:${bootstrapVersion}")
        // Webjars :: jQuery
        implementation("org.webjars:jquery:${jqueryVersion}")
        // Webjars :: Locator
        implementation("org.webjars:webjars-locator:${webjarsLocatorVersion}")
    }

    sonarqube {
        skipProject = true
    }
}

project(":brewer-application") {
    dependencies {
        implementation project(':brewer-commons')

        // Spring Boot Starter
        implementation('org.springframework.boot:spring-boot-starter')
    }
}

project(":brewer-commons") {
    dependencies {
        // Apache Commons :: Lang-3
        implementation('org.apache.commons:commons-lang3:3.11');
        // Spring Boot Starter :: Log4j2
        api('org.springframework.boot:spring-boot-starter-log4j2')
    }
}

project(":brewer-configuration") {
    apply(plugin: 'application')

    dependencies {
        implementation project(':adapters:brewer-api')
        implementation project(':adapters:brewer-persistence')
        implementation project(':adapters:brewer-web')
        implementation project(':brewer-application')
        implementation project(':brewer-commons')

        // Spring Boot Starter
        implementation('org.springframework.boot:spring-boot-starter')

        // Spring Boot Starter :: Web
        testImplementation('org.springframework.boot:spring-boot-starter-web')
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.language', 'java'
        property 'sonar.organization', 'bandrefilipe'
        property 'sonar.projectKey', 'bandrefilipe_brewer'
        property 'sonar.projectVersion', props.getProperty('app.version')
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}
